<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="5" time="264.541"><testcase classname="page3_1.Sisia" file="page3_1.py" line="62" name="test01_datos" time="53.215986013412476"><system-out>Falso
Valor de R: 5
</system-out></testcase><testcase classname="page3_1.Sisia" file="page3_1.py" line="184" name="test02_persona" time="39.258092403411865"><failure message="selenium.common.exceptions.JavascriptException: Message: javascript error: Failed to execute &apos;elementsFromPoint&apos; on &apos;Document&apos;: The provided double value is non-finite.
  (Session info: chrome=87.0.4280.66)">self = &lt;page3_1.Sisia testMethod=test02_persona&gt;

    def test02_persona(self):
        self.driver.implicitly_wait(30)
        driver = self.driver
        driver.get(ruta)
        f = Funciones(driver)
        fe = Funexcel(driver)
        f.tiempo(2)
        path = excel
        hoja = &quot;Hoja3&quot;
        rows = fe.getRowCount(path, hoja)
        for r in range(ren, rows + 1):
            user = fe.readData(path, &quot;Hoja3&quot;, r, 1)
            passw = fe.readData(path, &quot;Hoja3&quot;, r, 9)
            # Seccion Personal
            nom = str(fe.readData(path, &quot;Hoja3&quot;, r, 23))
            ap = str(fe.readData(path, &quot;Hoja3&quot;, r, 24))
            am = str(fe.readData(path, &quot;Hoja3&quot;, r, 25))
            email = str(fe.readData(path, &quot;Hoja3&quot;, r, 26))
            puesto = str(fe.readData(path, &quot;Hoja3&quot;, r, 27))
            costo = str(fe.readData(path, &quot;Hoja3&quot;, r, 28))
            laboral = str(fe.readData(path, &quot;Hoja3&quot;, r, 29))
            telefono = str(fe.readData(path, &quot;Hoja3&quot;, r, 14))
            sample_letters = &apos;ABCDFEGHIJKLOPQRTSRETUIO&apos;
            sample = &apos;XFTRGERDFRESCDFTYUIOPKASDR&apos;
            rt = random.choice(sample_letters)
            rt2 = random.choice(sample)
            ra = random.randint(1, 9)
            ra1 = random.randint(1, 9)
            rfc = str(fe.readData(path, &quot;Hoja3&quot;, r, 15))
            rfcc = rfc + str(ra1) + rt + str(ra)
            curp = str(fe.readData(path, &quot;Hoja3&quot;, r, 16))
            curpp = curp + rt + str(ra)
    
            # Login
            f.texto(&quot;//input[contains(@id,&apos;username&apos;)]&quot;, user)
            f.texto(&quot;//input[contains(@id,&apos;password&apos;)]&quot;, passw)
            f.Click(&quot;//button[@class=&apos;btn btn-primary pull-right&apos;][contains(.,&apos;Iniciar sesión&apos;)]&quot;)
            f.Click(&quot;//a[@aria-expanded=&apos;false&apos;][contains(.,&apos;Configuraciones&apos;)]&quot;)
            #f.Click(&quot;//a[@href=&apos;/recursos-humanos-materiales&apos;]&quot;)
            f.Click(&quot;//a[@href=&apos;/sisia/recursos-humanos-materiales&apos;][contains(.,&apos;Recursos Humanos Y Materiales&apos;)]&quot;)
    
            # Sección personal
            f.Click_menus(&quot;//a[contains(.,&apos;Personal&apos;)]&quot;)
            f.tiempo(1)
            f.scrolling(300)
            f.texto(&quot;(//input[contains(@formcontrolname,&apos;nombre&apos;)])[1]&quot;, nom)
            f.texto(&quot;//input[@formcontrolname=&apos;paterno&apos;]&quot;, ap)
            f.texto(&quot;//input[contains(@formcontrolname,&apos;materno&apos;)]&quot;, am)
            f.texto(&quot;(//input[contains(@formcontrolname,&apos;rfc&apos;)])[1]&quot;, rfcc)
            f.texto(&quot;//input[contains(@formcontrolname,&apos;curp&apos;)]&quot;, curpp)
            f.texto(&quot;//input[contains(@formcontrolname,&apos;correo&apos;)]&quot;, email)
            f.texto(&quot;(//input[@formcontrolname=&apos;telefono&apos;])[1]&quot;, telefono)
            f.scrolling(550)
            f.tiempo(1)
            f.combo_index(&quot;//select[@formcontrolname=&apos;puesto&apos;]&quot;, puesto)
            f.texto(&quot;//input[contains(@formcontrolname,&apos;costoMensual&apos;)]&quot;, costo)
            f.combo_index(&quot;//select[contains(@formcontrolname,&apos;ubicacionLaboral&apos;)]&quot;, laboral)
            f.Click(&quot;(//button[@class=&apos;btn btn-primary btn-block btn-sm&apos;][contains(.,&apos;Agregar&apos;)])[1]&quot;)
            driver.implicitly_wait(8)
            f.tiempo(8)
            v = f.existe_try(&quot;//button[@class=&apos;btn btn-default&apos;][contains(.,&apos;Entendido&apos;)]&quot;)
            if (v == &quot;Existe&quot;):
&gt;               f.Click(&quot;//button[@class=&apos;btn btn-default&apos;][contains(.,&apos;Entendido&apos;)]&quot;)

page3_1.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
funciones.py:41: in Click
    actions.move_to_element(e).perform()
c:\users\rodrigo.villanueva.c\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\common\action_chains.py:80: in perform
    self.w3c_actions.perform()
c:\users\rodrigo.villanueva.c\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\common\actions\action_builder.py:76: in perform
    self.driver.execute(Command.W3C_ACTIONS, enc)
c:\users\rodrigo.villanueva.c\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000227C1314E08&gt;
response = {&apos;status&apos;: 500, &apos;value&apos;: &apos;{&quot;value&quot;:{&quot;error&quot;:&quot;javascript error&quot;,&quot;message&quot;:&quot;javascript error: Failed to execute \&apos;elemen...\n\\tRtlGetAppContainerNamedObjectPath [0x76F08944+228]\\n\\tRtlGetAppContainerNamedObjectPath [0x76F08914+180]\\n&quot;}}&apos;}

    def check_response(self, response):
        &quot;&quot;&quot;
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        &quot;&quot;&quot;
        status = response.get(&apos;status&apos;, None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get(&quot;message&quot;, &quot;&quot;)
        screen = response.get(&quot;screen&quot;, &quot;&quot;)
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get(&apos;value&apos;, None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value[&apos;value&apos;]
                    status = value.get(&apos;error&apos;, None)
                    if status is None:
                        status = value[&quot;status&quot;]
                        message = value[&quot;value&quot;]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get(&apos;message&apos;)
                    else:
                        message = value.get(&apos;message&apos;, None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == &apos;&apos; or value is None:
            value = response[&apos;value&apos;]
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == &quot;&quot; and &apos;message&apos; in value:
            message = value[&apos;message&apos;]
    
        screen = None
        if &apos;screen&apos; in value:
            screen = value[&apos;screen&apos;]
    
        stacktrace = None
        if &apos;stackTrace&apos; in value and value[&apos;stackTrace&apos;]:
            stacktrace = []
            try:
                for frame in value[&apos;stackTrace&apos;]:
                    line = self._value_or_default(frame, &apos;lineNumber&apos;, &apos;&apos;)
                    file = self._value_or_default(frame, &apos;fileName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if line:
                        file = &quot;%s:%s&quot; % (file, line)
                    meth = self._value_or_default(frame, &apos;methodName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if &apos;className&apos; in frame:
                        meth = &quot;%s.%s&quot; % (frame[&apos;className&apos;], meth)
                    msg = &quot;    at %s (%s)&quot;
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if &apos;data&apos; in value:
                alert_text = value[&apos;data&apos;].get(&apos;text&apos;)
            elif &apos;alert&apos; in value:
                alert_text = value[&apos;alert&apos;].get(&apos;text&apos;)
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.JavascriptException: Message: javascript error: Failed to execute &apos;elementsFromPoint&apos; on &apos;Document&apos;: The provided double value is non-finite.
E         (Session info: chrome=87.0.4280.66)

c:\users\rodrigo.villanueva.c\appdata\local\programs\python\python37\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: JavascriptException</failure></testcase><testcase classname="page3_1.Sisia" file="page3_1.py" line="266" name="test03_instalacion" time="62.18300127983093"><system-out>1
</system-out></testcase><testcase classname="page3_1.Sisia" file="page3_1.py" line="338" name="test04_inventario" time="54.43477725982666"></testcase><testcase classname="page3_1.Sisia" file="page3_1.py" line="411" name="test05_bien" time="54.34442400932312"><system-out>Text Completado
</system-out></testcase></testsuite>